name: CI Pipeline

on:
  pull_request:
    branches:
      - '**'
  push:
    branches:
      - main

jobs:
  lint-backend:
    name: Lint Backend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout backend
        uses: actions/checkout@v3
        with:
          path: backend
      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: '3.10'
      - name: Create empty .env file
        run: touch backend/.env
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
      - name: Install backend dependencies
        working-directory: backend
        run: make env-create
      - name: Run backend linting
        working-directory: backend
        run: |
          source app/.venv/bin/activate
          make lint

  lint-frontend:
    name: Lint Frontend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - name: Checkout frontend
        uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      - name: Set up pnpm 8.6.1
        uses: pnpm/action-setup@v2
        with:
          version: 8.6.1
      - name: Cache pnpm store
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
      - name: Install frontend dependencies
        run: pnpm install
      - name: Lint Frontend
        run: pnpm lint
        env:
          NEXTAUTH_SECRET: bxgh3SAToI/dvtS8/FPNcJbH2Lq+KKuS3KbKvc0x6v0=
          NEXTAUTH_URL: http://localhost:3000
          GITHUB_ID: ${{ secrets.GH_AUTH_ID }}
          GITHUB_SECRET: ${{ secrets.GH_AUTH_SECRET }}
          NEXT_PUBLIC_API_URL: http://localhost:3000/api/v1
      - name: Format Check
        run: pnpm prettier

  tests-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout backend
        uses: actions/checkout@v3
        with:
          path: backend
      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: '3.10'
      - name: Create empty .env file
        run: touch backend/.env
      - name: Install backend dependencies
        working-directory: backend
        run: make env-create
      - name: Run backend tests
        working-directory: backend
        run: |
          source app/.venv/bin/activate
          make test

  release:
    name: Release
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - name: Checkout frontend
        uses: actions/checkout@v3
        with:
          persist-credentials: false
      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@v4
        with:
          semantic_version: 16
          branches: |
            [
              '+([0-9])?(.{+([0-9]),x}).x',
              'main'
            ]
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

  analyze-docker:
    name: Analyze Docker Images with Dive
    runs-on: ubuntu-latest
    needs: [lint-backend, lint-frontend, tests-backend]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Build Docker Images
        run: |
          docker-compose build fastapi_server nextjs_server
      - name: Run Dive on fastapi_server
        run: |
          docker pull wagoodman/dive:latest
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock wagoodman/dive:latest fastapi_server
      - name: Run Dive on nextjs_server
        run: |
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock wagoodman/dive:latest nextjs_server
